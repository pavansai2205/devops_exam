{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\SV\\\\Frontend\\\\src\\\\components\\\\Cart\\\\CartContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  console.log('CartProvider component rendered');\n\n  // Function to add an item to the cart\n  const addToCart = product => {\n    console.log('addToCart function called');\n    setCart(prevCart => {\n      console.log('Previous cart:', prevCart);\n      const existingProduct = prevCart.find(item => item.id === product.id);\n      if (existingProduct) {\n        // If the product already exists, increment its quantity\n        const updatedCart = prevCart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n        console.log('Updated cart:', updatedCart);\n        return updatedCart;\n      } else {\n        // If the product doesn't exist, add it with a quantity of 1\n        const updatedCart = [...prevCart, {\n          ...product,\n          quantity: 1\n        }];\n        console.log('Updated cart:', updatedCart);\n        return updatedCart;\n      }\n    });\n  };\n\n  // Function to remove an item from the cart\n  const removeFromCart = product => {\n    console.log('removeFromCart function called');\n    setCart(prevCart => {\n      const updatedCart = prevCart.filter(item => item.id !== product.id);\n      console.log('Updated cart:', updatedCart);\n      return updatedCart;\n    });\n  };\n\n  // Function to update the quantity of an item in the cart\n  const updateQuantity = (product, newQuantity) => {\n    console.log('updateQuantity function called');\n    if (newQuantity <= 0) {\n      // If quantity is 0 or negative, remove the product from the cart\n      removeFromCart(product);\n    } else {\n      setCart(prevCart => {\n        const updatedCart = prevCart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: newQuantity\n        } : item);\n        console.log('Updated cart:', updatedCart);\n        return updatedCart;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      updateQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","console","log","addToCart","product","prevCart","existingProduct","find","item","id","updatedCart","map","quantity","removeFromCart","filter","updateQuantity","newQuantity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/React/SV/Frontend/src/components/Cart/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const CartContext = createContext();\r\n\r\nconst CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n\r\n  console.log('CartProvider component rendered');\r\n\r\n  // Function to add an item to the cart\r\n  const addToCart = (product) => {\r\n    console.log('addToCart function called');\r\n    setCart((prevCart) => {\r\n      console.log('Previous cart:', prevCart);\r\n      const existingProduct = prevCart.find((item) => item.id === product.id);\r\n      if (existingProduct) {\r\n        // If the product already exists, increment its quantity\r\n        const updatedCart = prevCart.map((item) =>\r\n          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\r\n        );\r\n        console.log('Updated cart:', updatedCart);\r\n        return updatedCart;\r\n      } else {\r\n        // If the product doesn't exist, add it with a quantity of 1\r\n        const updatedCart = [...prevCart, { ...product, quantity: 1 }];\r\n        console.log('Updated cart:', updatedCart);\r\n        return updatedCart;\r\n      }\r\n    });\r\n  };\r\n\r\n  // Function to remove an item from the cart\r\n  const removeFromCart = (product) => {\r\n    console.log('removeFromCart function called');\r\n    setCart((prevCart) => {\r\n      const updatedCart = prevCart.filter((item) => item.id !== product.id);\r\n      console.log('Updated cart:', updatedCart);\r\n      return updatedCart;\r\n    });\r\n  };\r\n\r\n  // Function to update the quantity of an item in the cart\r\n  const updateQuantity = (product, newQuantity) => {\r\n    console.log('updateQuantity function called');\r\n    if (newQuantity <= 0) {\r\n      // If quantity is 0 or negative, remove the product from the cart\r\n      removeFromCart(product);\r\n    } else {\r\n      setCart((prevCart) => {\r\n        const updatedCart = prevCart.map((item) =>\r\n          item.id === product.id ? { ...item, quantity: newQuantity } : item\r\n        );\r\n        console.log('Updated cart:', updatedCart);\r\n        return updatedCart;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart, updateQuantity }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}